{"version":3,"sources":["hooks/useGetWalletNfts.ts","views/Collectibles/components/InfoRow.tsx","views/Collectibles/components/TransferNftModal.tsx","views/Collectibles/components/ClaimNftModal.tsx","views/Collectibles/components/NftCard/Preview.tsx","views/Collectibles/components/NftCard/index.tsx","views/Collectibles/components/NftGrid.tsx","views/Collectibles/components/NftList.tsx","views/Collectibles/index.tsx"],"names":["pancakeRabbitsContract","getPancakeRabbitContract","initialState","isLoading","nfts","lastUpdated","Date","now","reducer","state","action","type","data","timestamp","useGetWalletNfts","useReducer","dispatch","account","useWallet","useEffect","a","methods","balanceOf","call","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","getBunnyId","tokenURI","tokenId","makeBatchRequest","bunnyId","tokenUri","Number","tokenIdPromises","i","push","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","tokenIds","fetchNfts","refresh","InfoRow","styled","div","Value","Text","ModalContent","Actions","Label","label","theme","colors","text","TransferNftModal","nft","onSuccess","onDismiss","useState","setIsLoading","value","setValue","error","setError","TranslateString","useI18n","usePancakeRabbits","toastSuccess","useToast","handleConfirm","Web3","utils","isAddress","transferFrom","send","from","on","console","title","color","mb","name","htmlFor","id","placeholder","onChange","evt","inputValue","target","isWarning","disabled","fullWidth","variant","onClick","ClaimNftModal","isConfirming","setIsConfirming","toastError","bunnySpecialContract","useBunnySpecialContract","mintNFT","alignItems","justifyContent","bold","Container","borderColor","StyledImage","img","StyledVideo","video","Preview","isOwned","images","previewImageSrc","lg","videoComponent","autoPlay","controls","loop","muted","poster","src","webm","mp4","href","ipfs","rel","previewImage","alt","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","canClaim","isOpen","setIsOpen","profile","useProfile","description","walletOwnsNft","length","Icon","ChevronUpIcon","ChevronDownIcon","handleClick","useModal","onPresentTransferModal","onPresentClaimModal","isActive","outline","mt","p","endIcon","width","as","style","textAlign","NftGrid","mediaQueries","sm","md","getBunnySpecialContract","NftList","claimableNfts","setClaimableNfts","nftTokenIds","fetchClaimableStatuses","useCallback","walletAddress","map","canClaimSingle","claimStatuses","claimStatus","handleSuccess","orderBy","StyledHero","textSubtle","Collectibles","Page","size"],"mappings":"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","file":"static/js/15.ca5eda99.chunk.js","sourcesContent":["import { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useEffect, useReducer } from 'react'\r\nimport { getPancakeRabbitContract } from 'utils/contractHelpers'\r\nimport makeBatchRequest from 'utils/makeBatchRequest'\r\n\r\nconst pancakeRabbitsContract = getPancakeRabbitContract()\r\n\r\nexport type NftMap = {\r\n  [key: number]: {\r\n    tokenUri: string\r\n    tokenIds: number[]\r\n  }\r\n}\r\n\r\ntype Action = { type: 'set_nfts'; data: NftMap } | { type: 'reset' } | { type: 'refresh'; timestamp: number }\r\n\r\ntype State = {\r\n  isLoading: boolean\r\n  nfts: NftMap\r\n  lastUpdated: number\r\n}\r\n\r\nconst initialState: State = {\r\n  isLoading: true,\r\n  nfts: {},\r\n  lastUpdated: Date.now(),\r\n}\r\n\r\nconst reducer = (state: State, action: Action) => {\r\n  switch (action.type) {\r\n    case 'set_nfts':\r\n      return {\r\n        ...initialState,\r\n        isLoading: false,\r\n        nfts: action.data,\r\n      }\r\n    case 'refresh':\r\n      return {\r\n        ...initialState,\r\n        lastUpdated: action.timestamp,\r\n      }\r\n    case 'reset':\r\n      return {\r\n        ...initialState,\r\n        isLoading: false,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst useGetWalletNfts = () => {\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  const { account } = useWallet()\r\n  const { lastUpdated } = state\r\n\r\n  useEffect(() => {\r\n    const fetchNfts = async () => {\r\n      try {\r\n        const balanceOf = await pancakeRabbitsContract.methods.balanceOf(account).call()\r\n\r\n        if (balanceOf > 0) {\r\n          let nfts: NftMap = {}\r\n\r\n          const getTokenIdAndBunnyId = async (index: number) => {\r\n            try {\r\n              const { tokenOfOwnerByIndex, getBunnyId, tokenURI } = pancakeRabbitsContract.methods\r\n              const tokenId = await tokenOfOwnerByIndex(account, index).call()\r\n              const [bunnyId, tokenUri] = await makeBatchRequest([getBunnyId(tokenId).call, tokenURI(tokenId).call])\r\n\r\n              return [Number(bunnyId), Number(tokenId), tokenUri]\r\n            } catch (error) {\r\n              return null\r\n            }\r\n          }\r\n\r\n          const tokenIdPromises = []\r\n\r\n          for (let i = 0; i < balanceOf; i++) {\r\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\r\n          }\r\n\r\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\r\n\r\n          nfts = tokenIdsOwnedByWallet.reduce((accum, association) => {\r\n            if (!association) {\r\n              return accum\r\n            }\r\n\r\n            const [bunnyId, tokenId, tokenUri] = association\r\n\r\n            return {\r\n              ...accum,\r\n              [bunnyId]: {\r\n                tokenUri,\r\n                tokenIds: accum[bunnyId] ? [...accum[bunnyId].tokenIds, tokenId] : [tokenId],\r\n              },\r\n            }\r\n          }, {})\r\n\r\n          dispatch({ type: 'set_nfts', data: nfts })\r\n        } else {\r\n          // Reset it in case of wallet change\r\n          dispatch({ type: 'reset' })\r\n        }\r\n      } catch (error) {\r\n        dispatch({ type: 'reset' })\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchNfts()\r\n    }\r\n  }, [account, lastUpdated, dispatch])\r\n\r\n  const refresh = () => dispatch({ type: 'refresh', timestamp: Date.now() })\r\n\r\n  return { ...state, refresh }\r\n}\r\n\r\nexport default useGetWalletNfts\r\n","import styled from 'styled-components'\r\n\r\nconst InfoRow = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`\r\n\r\nexport default InfoRow\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Web3 from 'web3'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Button, Input, Modal, Text } from 'lionuikit'\r\nimport { useToast } from 'state/hooks'\r\nimport { Nft } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { usePancakeRabbits } from 'hooks/useContract'\r\nimport InfoRow from './InfoRow'\r\n\r\ninterface TransferNftModalProps {\r\n  nft: Nft\r\n  tokenIds: number[]\r\n  onSuccess: () => any\r\n  onDismiss?: () => void\r\n}\r\n\r\nconst Value = styled(Text)`\r\n  font-weight: 600;\r\n`\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst Label = styled.label`\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  margin-top: 24px;\r\n`\r\n\r\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [value, setValue] = useState('')\r\n  const [error, setError] = useState(null)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const pancakeRabbitsContract = usePancakeRabbits()\r\n  const { toastSuccess } = useToast()\r\n\r\n  const handleConfirm = async () => {\r\n    try {\r\n      const isValidAddress = Web3.utils.isAddress(value)\r\n\r\n      if (!isValidAddress) {\r\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\r\n      } else {\r\n        await pancakeRabbitsContract.methods\r\n          .transferFrom(account, value, tokenIds[0])\r\n          .send({ from: account })\r\n          .on('sending', () => {\r\n            setIsLoading(true)\r\n          })\r\n          .on('receipt', () => {\r\n            onDismiss()\r\n            onSuccess()\r\n            toastSuccess('NFT successfully transferred!')\r\n          })\r\n          .on('error', () => {\r\n            console.error(error)\r\n            setError('Unable to transfer NFT')\r\n            setIsLoading(false)\r\n          })\r\n      }\r\n    } catch (err) {\r\n      console.error('Unable to transfer NFT:', err)\r\n    }\r\n  }\r\n\r\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value: inputValue } = evt.target\r\n    setValue(inputValue)\r\n  }\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        {error && (\r\n          <Text color=\"failure\" mb=\"8px\">\r\n            {error}\r\n          </Text>\r\n        )}\r\n        <InfoRow>\r\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\r\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\r\n        </InfoRow>\r\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\r\n        <Input\r\n          id=\"transferAddress\"\r\n          name=\"address\"\r\n          type=\"text\"\r\n          placeholder={TranslateString(999, 'Paste address')}\r\n          value={value}\r\n          onChange={handleChange}\r\n          isWarning={error}\r\n          disabled={isLoading}\r\n        />\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isLoading || !value}>\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default TransferNftModal\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useBunnySpecialContract } from 'hooks/useContract'\r\nimport { useToast } from 'state/hooks'\r\nimport { Button, InjectedModalProps, Modal, Text, Flex } from 'lionuikit'\r\nimport { Nft } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\ninterface ClaimNftModalProps extends InjectedModalProps {\r\n  nft: Nft\r\n  onSuccess: () => void\r\n}\r\n\r\nconst ModalContent = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  grid-gap: 8px;\r\n`\r\n\r\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onDismiss }) => {\r\n  const [isConfirming, setIsConfirming] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const { toastError, toastSuccess } = useToast()\r\n  const bunnySpecialContract = useBunnySpecialContract()\r\n\r\n  const handleConfirm = async () => {\r\n    bunnySpecialContract.methods\r\n      .mintNFT(nft.bunnyId)\r\n      .send({ from: account })\r\n      .on('sending', () => {\r\n        setIsConfirming(true)\r\n      })\r\n      .on('receipt', () => {\r\n        toastSuccess('Successfully claimed!')\r\n        onDismiss()\r\n        onSuccess()\r\n      })\r\n      .on('error', (error) => {\r\n        console.error('Unable to claim NFT', error)\r\n        toastError('Error', 'Unable to claim NFT, please try again.')\r\n        setIsConfirming(false)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <Modal title={TranslateString(999, 'Claim Collectible')} onDismiss={onDismiss}>\r\n      <ModalContent>\r\n        <Flex alignItems=\"center\" mb=\"8px\" justifyContent=\"space-between\">\r\n          <Text>{TranslateString(626, 'You will receive')}:</Text>\r\n          <Text bold>{`1x \"${nft.name}\" Collectible`}</Text>\r\n        </Flex>\r\n      </ModalContent>\r\n      <Actions>\r\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button fullWidth onClick={handleConfirm} disabled={!account || isConfirming}>\r\n          {TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </Actions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ClaimNftModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Nft } from 'config/constants/types'\r\n\r\ninterface PreviewProps {\r\n  nft: Nft\r\n  isOwned?: boolean\r\n}\r\n\r\nconst Container = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  position: relative;\r\n  width: 100%;\r\n  overflow: hidden;\r\n  padding-bottom: 100%;\r\n`\r\n\r\nconst StyledImage = styled.img`\r\n  position: absolute;\r\n  width: 100%;\r\n  top: 0;\r\n  left: 0;\r\n  transition: opacity 1s linear;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  border-radius: 32px 32px 0 0;\r\n`\r\n\r\nconst StyledVideo = styled.video`\r\n  height: 100%;\r\n  width: 100%;\r\n`\r\n\r\nconst Preview: React.FC<PreviewProps> = ({ nft, isOwned = false }) => {\r\n  const { images, name, video } = nft\r\n  const previewImageSrc = `/images/nfts/${images.lg}`\r\n\r\n  if (video) {\r\n    const videoComponent = (\r\n      <StyledVideo autoPlay controls={false} loop muted poster={previewImageSrc}>\r\n        <source src={video.webm} type=\"video/webm\" />\r\n        <source src={video.mp4} type=\"video/mp4\" />\r\n      </StyledVideo>\r\n    )\r\n\r\n    return isOwned ? (\r\n      <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\r\n        {videoComponent}\r\n      </a>\r\n    ) : (\r\n      videoComponent\r\n    )\r\n  }\r\n\r\n  const previewImage = <StyledImage src={previewImageSrc} alt={name} />\r\n\r\n  return (\r\n    <Container>\r\n      {isOwned ? (\r\n        <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\r\n          {previewImage}\r\n        </a>\r\n      ) : (\r\n        previewImage\r\n      )}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Preview\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Heading,\r\n  Tag,\r\n  Button,\r\n  ChevronUpIcon,\r\n  ChevronDownIcon,\r\n  Text,\r\n  CardFooter,\r\n  useModal,\r\n} from 'lionuikit'\r\nimport { useProfile } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { Nft } from 'config/constants/types'\r\nimport InfoRow from '../InfoRow'\r\nimport TransferNftModal from '../TransferNftModal'\r\nimport ClaimNftModal from '../ClaimNftModal'\r\nimport Preview from './Preview'\r\n\r\ninterface NftCardProps {\r\n  nft: Nft\r\n  canClaim?: boolean\r\n  tokenIds?: number[]\r\n  onSuccess: () => void\r\n}\r\n\r\nconst Header = styled(InfoRow)`\r\n  min-height: 28px;\r\n`\r\n\r\nconst DetailsButton = styled(Button).attrs({ variant: 'text', fullWidth: true })`\r\n  height: auto;\r\n  padding: 16px 24px;\r\n\r\n  &:hover:not(:disabled):not(:active) {\r\n    background-color: transparent;\r\n  }\r\n\r\n  &:focus:not(:active) {\r\n    box-shadow: none;\r\n  }\r\n`\r\n\r\nconst InfoBlock = styled.div`\r\n  padding: 24px;\r\n`\r\n\r\nconst NftCard: React.FC<NftCardProps> = ({ nft, onSuccess, canClaim = false, tokenIds = [] }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const { profile } = useProfile()\r\n  const { bunnyId, name, description } = nft\r\n  const walletOwnsNft = tokenIds.length > 0\r\n  const Icon = isOpen ? ChevronUpIcon : ChevronDownIcon\r\n\r\n  const handleClick = async () => {\r\n    setIsOpen(!isOpen)\r\n  }\r\n\r\n  const [onPresentTransferModal] = useModal(<TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={onSuccess} />)\r\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={onSuccess} />)\r\n\r\n  return (\r\n    <Card isActive={walletOwnsNft || canClaim}>\r\n      <Preview nft={nft} isOwned={walletOwnsNft} />\r\n      <CardBody>\r\n        <Header>\r\n          <Heading>{name}</Heading>\r\n          {walletOwnsNft && (\r\n            <Tag outline variant=\"secondary\">\r\n              {TranslateString(999, 'In Wallet')}\r\n            </Tag>\r\n          )}\r\n          {profile?.nft?.bunnyId === bunnyId && (\r\n            <Tag outline variant=\"success\">\r\n              {TranslateString(999, 'Profile Pic')}\r\n            </Tag>\r\n          )}\r\n        </Header>\r\n        {canClaim && (\r\n          <Button fullWidth mt=\"24px\" onClick={onPresentClaimModal}>\r\n            {TranslateString(999, 'Claim this NFT')}\r\n          </Button>\r\n        )}\r\n        {walletOwnsNft && (\r\n          <Button fullWidth variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\r\n            {TranslateString(999, 'Transfer')}\r\n          </Button>\r\n        )}\r\n      </CardBody>\r\n      <CardFooter p=\"0\">\r\n        <DetailsButton endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\r\n          {TranslateString(658, 'Details')}\r\n        </DetailsButton>\r\n        {isOpen && (\r\n          <InfoBlock>\r\n            <Text as=\"p\" color=\"textSubtle\" style={{ textAlign: 'center' }}>\r\n              {description}\r\n            </Text>\r\n          </InfoBlock>\r\n        )}\r\n      </CardFooter>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default NftCard\r\n","import styled from 'styled-components'\r\n\r\nconst NftGrid = styled.div`\r\n  display: grid;\r\n  grid-gap: 32px;\r\n  grid-template-columns: 1fr;\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    grid-template-columns: repeat(3, 1fr);\r\n  }\r\n`\r\n\r\nexport default NftGrid\r\n","import React, { useCallback, useEffect, useState } from 'react'\r\nimport orderBy from 'lodash/orderBy'\r\nimport nfts from 'config/constants/nfts'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { getBunnySpecialContract } from 'utils/contractHelpers'\r\nimport useGetWalletNfts from 'hooks/useGetWalletNfts'\r\nimport makeBatchRequest from 'utils/makeBatchRequest'\r\nimport { useToast } from 'state/hooks'\r\nimport NftCard from './NftCard'\r\nimport NftGrid from './NftGrid'\r\n\r\ntype State = {\r\n  [key: string]: boolean\r\n}\r\n\r\nconst bunnySpecialContract = getBunnySpecialContract()\r\n\r\nconst NftList = () => {\r\n  const [claimableNfts, setClaimableNfts] = useState<State>({})\r\n  const { nfts: nftTokenIds, refresh } = useGetWalletNfts()\r\n  const { account } = useWallet()\r\n  const { toastError } = useToast()\r\n\r\n  const fetchClaimableStatuses = useCallback(\r\n    async (walletAddress: string) => {\r\n      try {\r\n        const claimStatuses = (await makeBatchRequest(\r\n          nfts.map((nft) => {\r\n            return bunnySpecialContract.methods.canClaimSingle(walletAddress, nft.bunnyId).call\r\n          }),\r\n        )) as boolean[]\r\n\r\n        setClaimableNfts(\r\n          claimStatuses.reduce((accum, claimStatus, index) => {\r\n            return {\r\n              ...accum,\r\n              [nfts[index].bunnyId]: claimStatus,\r\n            }\r\n          }, {}),\r\n        )\r\n      } catch (error) {\r\n        console.error(error)\r\n        toastError('Error checking NFT claimable status')\r\n      }\r\n    },\r\n    [setClaimableNfts, toastError],\r\n  )\r\n\r\n  const handleSuccess = () => {\r\n    refresh()\r\n    fetchClaimableStatuses(account)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      fetchClaimableStatuses(account)\r\n    }\r\n  }, [account, fetchClaimableStatuses])\r\n\r\n  return (\r\n    <NftGrid>\r\n      {orderBy(nfts, 'sortOrder').map((nft) => {\r\n        const tokenIds = nftTokenIds[nft.bunnyId] ? nftTokenIds[nft.bunnyId].tokenIds : []\r\n\r\n        return (\r\n          <div key={nft.name}>\r\n            <NftCard nft={nft} canClaim={claimableNfts[nft.bunnyId]} tokenIds={tokenIds} onSuccess={handleSuccess} />\r\n          </div>\r\n        )\r\n      })}\r\n    </NftGrid>\r\n  )\r\n}\r\n\r\nexport default NftList\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading } from 'lionuikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport NftList from './components/NftList'\r\n\r\nconst StyledHero = styled.div`\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\r\n  margin-bottom: 24px;\r\n  padding-bottom: 32px;\r\n`\r\n\r\nconst Collectibles = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Page>\r\n      <StyledHero>\r\n        <Heading as=\"h1\" size=\"xxl\" color=\"secondary\">\r\n          {TranslateString(999, 'Pancake Collectibles')}\r\n        </Heading>\r\n      </StyledHero>\r\n      <NftList />\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Collectibles\r\n"],"sourceRoot":""}