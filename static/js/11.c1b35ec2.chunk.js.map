{"version":3,"sources":["utils/erc20.ts","hooks/useTokenBalance.ts","hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/CakeStats.tsx","views/Home/Home.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","balance","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","cakeContract","cakeABI","getCakeAddress","supply","BigNumber","fetchTotalSupply","useBurnedBalance","setBalance","useWallet","ethereum","res","fetchBalance","useTokenBalance","fastRefresh","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","calls","farmsConfig","map","farm","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","fetchBalances","useAllEarnings","balances","fetchAllBalances","CardValue","value","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","style","CardBusdValue","props","Block","styled","div","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","pow","toNumber","earningsBusd","multipliedBy","usePriceCakeBusd","CakeWalletBalance","cakeBalance","busdBalance","getBalanceNumber","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","menuText","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","width","height","marginTop","id","disabled","length","onClick","fullWidth","secondarybutton","UnlockButton","StyledTotalValueLockedCard","TotalValueLockedCard","farmsLP","useFarms","cakePrice","bnbPrice","usePriceBnbBusd","tvl","i","lpTotalInQuoteToken","quoteTokenSymbol","QuoteToken","BNB","plus","times","LION","total","toLocaleString","StyledCakeStats","Row","CakeStats","burnedBalance","cakeSupply","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/11.c1b35ec2.chunk.js","sourcesContent":["import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useTokenBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(ethereum, tokenAddress, '0x000000000000000000000000000000000000dEaD')\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && ethereum) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, ethereum, tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingCake',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account }: { account: string } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingCake',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from 'lionuikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","import React from 'react'\r\nimport { Text } from 'lionuikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport BigNumber from 'bignumber.js'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport styled from 'styled-components'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 24px;\r\n}\r\n`\r\n\r\nconst CakeHarvestBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const { account } = useWallet()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(usePriceCakeBusd()).toNumber()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"orangeTexttwo\" style={{ lineHeight: '40px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Block>\r\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\r\n      <CardBusdValue value={earningsBusd} />\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from 'lionuikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { usePriceCakeBusd } from 'state/hooks'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst CakeWalletBalance = () => {\r\n  const TranslateString = useI18n()\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(usePriceCakeBusd()).toNumber()\r\n  const { account } = useWallet()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"orangeTexttwo\" style={{ lineHeight: '40px' }}>\r\n        {TranslateString(298, 'Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\r\n      <CardBusdValue value={busdBalance} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button } from 'lionuikit'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useAllHarvest } from 'hooks/useHarvest'\r\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n \r\n  min-height: 376px;\r\n`\r\n\r\nconst Block = styled.div`\r\nmargin-top:20px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n  float:left;\r\n  margin-right:15px;\r\n  margin-top:20px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: ${({ theme }) => theme.colors.menuText};\r\n  font-size: 14px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n\r\n`\r\n\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWallet()\r\n  const TranslateString = useI18n()\r\n  const farmsWithBalance = useFarmsWithBalance()\r\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\r\n\r\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\r\n\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    try {\r\n      await onReward()\r\n    } catch (error) {\r\n      // TODO: find a way to handle when the user rejects transaction or it fails\r\n    } finally {\r\n      setPendingTx(false)\r\n    }\r\n  }, [onReward])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading size=\"xl\" mb=\"24px\">\r\n          {TranslateString(542, 'Farms & Staking')}\r\n        </Heading>\r\n        <div>\r\n        <CardImage src=\"/images/wallet-1.png\" width={130} height={150} />\r\n\r\n        </div>\r\n        \r\n        <div style={{ marginTop: \"60px\"}}>\r\n          \r\n        <Block >\r\n          <Label>{TranslateString(544, 'LION to Harvest')}:</Label>\r\n          <CakeHarvestBalance />\r\n        </Block>\r\n        <Block>\r\n          <Label>{TranslateString(546, 'LION in Wallet')}:</Label>\r\n          <CakeWalletBalance />\r\n        </Block>\r\n        </div>\r\n        <Actions>\r\n          {account ? (\r\n            <Button\r\n              id=\"harvest-all\"\r\n              disabled={balancesWithValue.length <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              fullWidth secondarybutton\r\n            >\r\n              {pendingTx\r\n                ? TranslateString(548, 'Collecting LION')\r\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`)}\r\n            </Button>\r\n          ) : (\r\n            <UnlockButton fullWidth secondarybutton />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from 'lionuikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\r\nimport BigNumber from 'bignumber.js'\r\nimport { QuoteToken } from 'config/constants/types'\r\n\r\nconst StyledTotalValueLockedCard = styled.div`\r\n  border-top:1px solid #2b2f3c63;\r\n  margin-top:24px;\r\n  padding-top:24px;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n\r\n  let tvl = new BigNumber(0)\r\n  for (let i = 0; i < farmsLP.length; i++) {\r\n    const farm = farmsLP[i]\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      //\r\n    } else if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      tvl = tvl.plus(new BigNumber(farm.lpTotalInQuoteToken).times(bnbPrice))\r\n    } else if (farm.quoteTokenSymbol === QuoteToken.LION) {\r\n      tvl = tvl.plus(cakePrice.times(farm.lpTotalInQuoteToken))\r\n    } else {\r\n      tvl = tvl.plus(farm.lpTotalInQuoteToken)\r\n    }\r\n  }\r\n  const total = (tvl.toNumber()).toLocaleString()\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <Heading size=\"lg\" mb=\"24px\" >\r\n        {TranslateString(762, 'Total Value Locked (TVL)')}\r\n      </Heading>\r\n      {total ? (\r\n        <>\r\n          <Heading size=\"xl\" color=\"orangeText\">{`$${total}`}</Heading>\r\n          <Text color=\"menuText\">{TranslateString(764, 'Across all LPs and LEO Pools')}</Text>\r\n        </>\r\n      ) : (\r\n          <>\r\n            <Skeleton height={66} />\r\n          </>\r\n        )}\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from 'lionuikit'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport CardValue from './CardValue'\r\nimport TotalValueLockedCard from './TotalValueLockedCard'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const TranslateString = useI18n()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = useBurnedBalance(getCakeAddress())\r\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - getBalanceNumber(burnedBalance) : 0\r\n\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading size=\"lg\" mb=\"24px\">\r\n          {TranslateString(534, 'Token Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Supply')}</Text>\r\n          {cakeSupply && <CardValue color=\"orangeText\" fontSize=\"14px\" value={cakeSupply} />}\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\r\n          <CardValue color=\"orangeText\" fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{TranslateString(540, 'New block')}</Text>\r\n          <CardValue color=\"orangeText\" fontSize=\"14px\" decimals={0} value={1} />\r\n        </Row>\r\n        <TotalValueLockedCard />\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout } from 'lionuikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport Page from 'components/layout/Page'\r\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\r\nimport LotteryCard from 'views/Home/components/LotteryCard'\r\nimport CakeStats from 'views/Home/components/CakeStats'\r\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\r\n\r\nconst Hero = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n   \r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 40px;\r\n  \r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n    -webkit-border-radius: 15px;\r\n    -moz-border-radius: 15px;\r\n    border-radius: 15px;\r\n    -webkit-box-shadow: 5px 5px 0px 5px #C6C6C6; \r\n    box-shadow: 5px 5px 0px 5px #C6C6C6;\r\n   \r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    \r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst Home: React.FC = () => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    \r\n    <Page>\r\n    \r\n      <Hero>\r\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\r\n          {TranslateString(576, 'Lion Swap')}\r\n        </Heading>\r\n        <Text>{TranslateString(578, 'Lion Farming on Binance Smart Chain with Lovely Lions.')}</Text>\r\n      </Hero>\r\n      <div>\r\n        <Cards>\r\n          <FarmStakingCard />\r\n          {/* <LotteryCard /> */}\r\n          <CakeStats />\r\n        </Cards>\r\n        <Cards>\r\n          {/* <CakeStats /> */}\r\n          {/* <TotalValueLockedCard /> */}\r\n        </Cards>\r\n      </div>\r\n       \r\n    </Page>\r\n   \r\n  )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}