{"version":3,"sources":["utils/erc20.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/Farms.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","balance","getLiquidityUrlPathParts","quoteTokenAdresses","quoteTokenSymbol","tokenAddresses","firstPart","process","secondPart","Wrapper","styled","div","StyledLinkExternal","LinkExternal","theme","colors","orangeTextthree","menuText","DetailsSection","bscScanAddress","removed","totalValueFormated","lpLabel","addLiquidityUrl","TranslateString","useI18n","justifyContent","href","color","external","bold","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","width","height","flexDirection","variant","StyledTokenInput","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","inputTitle","isBalanceZero","displayBalance","parseFloat","toFixed","style","position","pl","fontSize","toLocaleString","placeholder","size","onClick","mr","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","handleSelectMax","title","ModalActions","fullWidth","secondarybutton","disabled","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","pid","onStake","useStake","onUnstake","useUnstake","rawStakedBalance","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","HarvestAction","earnings","onReward","useHarvest","padding","borderRadius","backgroundImage","float","fontWeight","display","clear","marginTop","paddingTop","paddingBottom","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromSymbol","lpSymbol","lpAddresses","useFarmUser","lpAddress","getAddress","lpName","toUpperCase","isApproved","isGreaterThan","onApprove","useApprove","handleApprove","console","error","textTransform","pr","mt","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","cakePrice","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","ApyCalculatorModal","apy","times","BigNumber","toNumber","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","ml","StyledCardAccent","keyframes","FCard","props","card","background","FarmCard","borderColor","expanded","bnbPrice","ethPrice","communityFarms","includes","split","toLocaleLowerCase","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","LION","ETH","Number","undefined","maximumFractionDigits","replace","earnLabel","dual","farmAPY","slice","liquidityUrlPathParts","BASE_ADD_LIQUIDITY_URL","CardActionsContainer","FarmTabButtons","stackedOnly","setStackedOnly","useRouteMatch","url","isExact","ToggleWrapper","checked","activeIndex","as","Link","to","Farms","path","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","useWallet","ethPriceUsd","usePriceEthBusd","dispatch","useDispatch","fastRefresh","useRefresh","useEffect","fetchFarmUserDataAsync","activeFarms","filter","inactiveFarms","stackedOnlyFarms","userData","farmsList","farmsToDisplay","cakePriceVsBNB","find","CAKE_POOL_PID","tokenPriceVsQuote","map","tokenAmount","cakeRewardPerBlock","CAKE_PER_BLOCK","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","BUSD","UST","cakeApy","dualApy","rewardPerBlock","plus","Page","textAlign","exact"],"mappings":"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","file":"static/js/16.5f939bd6.chunk.js","sourcesContent":["import Web3 from 'web3'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { AbiItem } from 'web3-utils'\r\nimport erc20 from 'config/abi/erc20.json'\r\n\r\nexport const getContract = (provider: ProviderType, address: string) => {\r\n  const web3 = new Web3(provider)\r\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\r\n  return contract\r\n}\r\n\r\nexport const getAllowance = async (\r\n  lpContract: Contract,\r\n  masterChefContract: Contract,\r\n  account: string,\r\n): Promise<string> => {\r\n  try {\r\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\r\n    return allowance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n\r\nexport const getTokenBalance = async (\r\n  provider: ProviderType,\r\n  tokenAddress: string,\r\n  userAddress: string,\r\n): Promise<string> => {\r\n  const contract = getContract(provider, tokenAddress)\r\n  try {\r\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\r\n    return balance\r\n  } catch (e) {\r\n    return '0'\r\n  }\r\n}\r\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\r\n// Each part of the url represents a different side of the LP pair.\r\n// In the URL, using the quote token 'BNB' is represented by 'ETH'\r\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses }) => {\r\n  const chainId = process.env.REACT_APP_CHAIN_ID\r\n  const firstPart = quoteTokenSymbol === 'BNB' ? 'ETH' : quoteTokenAdresses[chainId]\r\n  const secondPart = tokenAddresses[chainId]\r\n  return `${firstPart}/${secondPart}`\r\n}\r\n\r\nexport default getLiquidityUrlPathParts\r\n","import React from 'react'\r\nimport useI18n from 'hooks/useI18n'\r\nimport styled from 'styled-components'\r\nimport { Text, Flex, Link, LinkExternal } from 'lionuikit'\r\n\r\nexport interface ExpandableSectionProps {\r\n  bscScanAddress?: string\r\n  removed?: boolean\r\n  totalValueFormated?: string\r\n  lpLabel?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst StyledLinkExternal = styled(LinkExternal)`\r\n  text-decoration: none;\r\n  font-weight: normal;\r\n  color: ${({ theme }) => theme.colors.orangeTextthree};\r\n  display: flex;\r\n  align-items: center;\r\n\r\n  svg {\r\n    padding-left: 4px;\r\n    height: 18px;\r\n    width: auto;\r\n    fill: ${({ theme }) => theme.colors.menuText};\r\n  }\r\n`\r\n\r\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\r\n  bscScanAddress,\r\n  removed,\r\n  totalValueFormated,\r\n  lpLabel,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(316, 'Stake')}:</Text>\r\n        <StyledLinkExternal href={addLiquidityUrl}>{lpLabel}</StyledLinkExternal>\r\n      </Flex>\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\">\r\n          <Text>{TranslateString(23, 'Total Liquidity')}:</Text>\r\n          <Text color=\"orangeTextthree\">{totalValueFormated}</Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"flex-start\">\r\n        <Link external href={bscScanAddress} bold={false}>\r\n          {TranslateString(356, 'View on BscScan')}\r\n        </Link>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default DetailsSection\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Tag, Flex, Heading, Image } from 'lionuikit'\r\nimport { CommunityTag, CoreTag } from 'components/Tags'\r\n\r\nexport interface ExpandableSectionProps {\r\n  lpLabel?: string\r\n  multiplier?: string\r\n  isCommunityFarm?: boolean\r\n  farmImage?: string\r\n  tokenSymbol?: string\r\n}\r\n\r\nconst Wrapper = styled(Flex)`\r\n  svg {\r\n    margin-right: 0.25rem;\r\n  }\r\n`\r\n\r\nconst MultiplierTag = styled(Tag)`\r\n  margin-left: 4px;\r\n  background-color:${({ theme }) => theme.colors.orangeTextthree};\r\n  border-color:${({ theme }) => theme.colors.orangeTextthree};\r\n  border-radius:6px;\r\n`\r\n\r\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\r\n  lpLabel,\r\n  multiplier,\r\n  isCommunityFarm,\r\n  farmImage,\r\n  tokenSymbol,\r\n}) => {\r\n  return (\r\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\r\n      <Image src={`/images/tokens/${farmImage}.png`} alt={tokenSymbol} width={90} height={64} />\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\r\n        <Heading mb=\"4px\">{lpLabel}</Heading>\r\n        <Flex justifyContent=\"center\">\r\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\r\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\r\n        </Flex>\r\n      </Flex>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CardHeading\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Text, Button, Input, InputProps, Flex, Link } from 'lionuikit'\r\nimport useI18n from '../../hooks/useI18n'\r\n\r\ninterface ModalInputProps {\r\n  max: string\r\n  symbol: string\r\n  onSelectMax?: () => void\r\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\r\n  placeholder?: string\r\n  value: string\r\n  addLiquidityUrl?: string\r\n  inputTitle?: string\r\n}\r\n\r\nconst getBoxShadow = ({ isWarning = false, theme }) => {\r\n  if (isWarning) {\r\n    return theme.shadows.warning\r\n  }\r\n\r\n  return theme.shadows.inset\r\n}\r\n\r\nconst StyledTokenInput = styled.div<InputProps>`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: ${({ theme }) => theme.colors.input};\r\n  border-radius: 16px;\r\n  box-shadow: ${getBoxShadow};\r\n  color: ${({ theme }) => theme.colors.text};\r\n  padding: 8px 16px 8px 0;\r\n  width: 100%;\r\n`\r\n\r\nconst StyledInput = styled(Input)`\r\n  box-shadow: none;\r\n  width: 60px;\r\n  margin: 0 8px;\r\n  padding: 0 8px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xs} {\r\n    width: 80px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n  }\r\n`\r\n\r\nconst StyledErrorMessage = styled(Text)`\r\n  position: absolute;\r\n  bottom: -22px;\r\n  a {\r\n    display: inline;\r\n  }\r\n`\r\n\r\nconst ModalInput: React.FC<ModalInputProps> = ({\r\n  max,\r\n  symbol,\r\n  onChange,\r\n  onSelectMax,\r\n  value,\r\n  addLiquidityUrl,\r\n  inputTitle,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const isBalanceZero = max === '0' || !max\r\n\r\n  const displayBalance = isBalanceZero ? '0' : parseFloat(max).toFixed(4)\r\n\r\n  return (\r\n    <div style={{ position: 'relative' }}>\r\n      <StyledTokenInput isWarning={isBalanceZero}>\r\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\r\n          <Text fontSize=\"14px\">{inputTitle}</Text>\r\n          <Text fontSize=\"14px\">\r\n            {TranslateString(1120, 'Balance')}: {displayBalance.toLocaleString()}\r\n          </Text>\r\n        </Flex>\r\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\r\n          <StyledInput onChange={onChange} placeholder=\"0\" value={value} />\r\n          <Button size=\"sm\" onClick={onSelectMax} mr=\"8px\">\r\n            {TranslateString(452, 'Max')}\r\n          </Button>\r\n          <Text fontSize=\"16px\">{symbol}</Text>\r\n        </Flex>\r\n      </StyledTokenInput>\r\n      {isBalanceZero && (\r\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\r\n          No tokens to stake:{' '}\r\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\r\n            {TranslateString(999, 'get')} {symbol}\r\n          </Link>\r\n        </StyledErrorMessage>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ModalInput\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal, LinkExternal } from 'lionuikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(1068, 'Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={TranslateString(1070, 'Stake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} fullWidth secondarybutton>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          fullWidth\r\n          \r\n          disabled={pendingTx || fullBalance === '0' || val === '0'}\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {TranslateString(999, 'Get')} {tokenName}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n","import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport { Button, Modal } from 'lionuikit'\r\nimport ModalActions from 'components/ModalActions'\r\nimport ModalInput from 'components/ModalInput'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { getFullDisplayBalance } from 'utils/formatBalance'\r\n\r\ninterface WithdrawModalProps {\r\n  max: BigNumber\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n}\r\n\r\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\r\n  const [val, setVal] = useState('')\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const TranslateString = useI18n()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max)\r\n  }, [max])\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      setVal(e.currentTarget.value)\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  return (\r\n    <Modal title={TranslateString(1126, 'Unstake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        value={val}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        inputTitle={TranslateString(588, 'Unstake')}\r\n      />\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} fullWidth>\r\n          {TranslateString(462, 'Cancel')}\r\n        </Button>\r\n        <Button\r\n          disabled={pendingTx}\r\n          secondarybutton\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            await onConfirm(val)\r\n            setPendingTx(false)\r\n            onDismiss()\r\n          }}\r\n          fullWidth\r\n        >\r\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default WithdrawModal\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from 'lionuikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport useStake from 'hooks/useStake'\r\nimport useUnstake from 'hooks/useUnstake'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport DepositModal from '../DepositModal'\r\nimport WithdrawModal from '../WithdrawModal'\r\n\r\ninterface FarmCardActionsProps {\r\n  stakedBalance?: BigNumber\r\n  tokenBalance?: BigNumber\r\n  tokenName?: string\r\n  pid?: number\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst IconButtonWrapper = styled.div`\r\n  display: flex;\r\n  svg {\r\n    width: 20px;\r\n  }\r\n`\r\n\r\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\r\n  stakedBalance,\r\n  tokenBalance,\r\n  tokenName,\r\n  pid,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const { onStake } = useStake(pid)\r\n  const { onUnstake } = useUnstake(pid)\r\n\r\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\r\n  const displayBalance = rawStakedBalance.toLocaleString()\r\n\r\n  const [onPresentDeposit] = useModal(\r\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n  const [onPresentWithdraw] = useModal(\r\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\r\n  )\r\n\r\n  const renderStakingButtons = () => {\r\n    return rawStakedBalance === 0 ? (\r\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake LP')}</Button>\r\n    ) : (\r\n      <IconButtonWrapper>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\r\n          <MinusIcon color=\"primary\" />\r\n        </IconButton>\r\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\r\n          <AddIcon color=\"primary\" />\r\n        </IconButton>\r\n      </IconButtonWrapper>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n      {renderStakingButtons()}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default StakeAction\r\n","import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from 'lionuikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { useHarvest } from 'hooks/useHarvest'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n}\r\n\r\n\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\r\n  const TranslateString = useI18n()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvest(pid)\r\n\r\n  const rawEarningsBalance = getBalanceNumber(earnings)\r\n  const displayBalance = rawEarningsBalance.toLocaleString()\r\n\r\n  return (\r\n    <Flex mb=\"8px\" alignItems=\"center\">\r\n      <div style={{width:\"100%\",padding:\"14px 14px 12px 10px\",borderRadius:\"10px\",backgroundImage:\"linear-gradient(to right, #ffd17d 2%, #eaab37)\"}}>\r\n      <Heading style={{float:\"left\",fontWeight:\"lighter\",display:\"block\",fontSize:\"14px\",clear:\"both\"}} color='menutext'>LEO EARNED</Heading>\r\n      <Heading style={{float:\"left\",display:\"block\",clear:\"both\"}} color='menutext'>{displayBalance}</Heading>\r\n      <Button\r\n      style={{marginTop:\"-13px\",float:\"right\",borderRadius:\"10px\",paddingTop:\"8px\",fontWeight:\"lighter\",paddingBottom:\"8px\",height:\"max-content\",backgroundImage:\"linear-gradient(to left, #2b2f3c, #596076)\"}}\r\n   \r\n        onClick={async () => {\r\n          setPendingTx(true)\r\n          await onReward()\r\n          setPendingTx(false)\r\n        }}\r\n      >\r\n        {TranslateString(562, 'Harvest')}\r\n      </Button>\r\n      </div>\r\n      \r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n","import React, { useMemo, useState, useCallback } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { provider } from 'web3-core'\r\nimport { getContract } from 'utils/erc20'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { Button, Flex, Text } from 'lionuikit'\r\nimport { Farm } from 'state/types'\r\nimport { useFarmFromSymbol, useFarmUser } from 'state/hooks'\r\nimport useI18n from 'hooks/useI18n'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { useApprove } from 'hooks/useApprove'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  ethereum?: provider\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account, addLiquidityUrl }) => {\r\n  const TranslateString = useI18n()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses } = useFarmFromSymbol(farm.lpSymbol)\r\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const lpName = farm.lpSymbol.toUpperCase()\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n\r\n  const lpContract = useMemo(() => {\r\n    return getContract(ethereum as provider, lpAddress)\r\n  }, [ethereum, lpAddress])\r\n\r\n  const { onApprove } = useApprove(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={lpName}\r\n        pid={pid}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" fullWidth secondarybutton disabled={requestedApproval} onClick={handleApprove}>\r\n        {TranslateString(758, 'Approve Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      \r\n      <HarvestAction earnings={earnings} pid={pid} />\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"menutext\" fontSize=\"16px\" pr=\"3px\">\r\n          {lpName}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"menutext\" fontSize=\"16px\">\r\n          {TranslateString(1074, 'Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <UnlockButton mt=\"8px\" fullWidth secondarybutton /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions\r\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\r\n\r\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\r\n  // Everything here is worked out relative to a year, with the asset compounding daily\r\n  const timesCompounded = 365\r\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\r\n  const apyAsDecimal = farmApy / 100\r\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\r\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\r\n  const principal = 1000 / cakePrice\r\n\r\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\r\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\r\n\r\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\r\n  const interestEarned = finalAmount - principal\r\n  return roundToTwoDp(interestEarned)\r\n}\r\n\r\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\r\n  const percentage = (amountEarned / amountInvested) * 100\r\n  return percentage.toFixed(2)\r\n}\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled from 'styled-components'\r\nimport { Modal, Text, LinkExternal, Flex } from 'lionuikit'\r\nimport useI18n from 'hooks/useI18n'\r\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\r\n\r\ninterface ApyCalculatorModalProps {\r\n  onDismiss?: () => void\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst Grid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-template-rows: repeat(4, auto);\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst GridItem = styled.div`\r\n  margin-bottom: '10px';\r\n`\r\n\r\nconst Description = styled(Text)`\r\n  max-width: 320px;\r\n  margin-bottom: 28px;\r\n`\r\n\r\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\r\n  onDismiss,\r\n  lpLabel,\r\n  cakePrice,\r\n  apy,\r\n  addLiquidityUrl,\r\n}) => {\r\n  const TranslateString = useI18n()\r\n  const farmApy = apy.times(new BigNumber(100)).toNumber()\r\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\r\n\r\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy, cakePrice })\r\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 365, farmApy, cakePrice })\r\n\r\n  return (\r\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\r\n      <Grid>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(860, 'Timeframe')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(858, 'ROI')}\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\r\n            {TranslateString(864, 'LION per $1000')}\r\n          </Text>\r\n        </GridItem>\r\n        {/* 1 day row */}\r\n        <GridItem>\r\n          <Text>1d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand1D}</Text>\r\n        </GridItem>\r\n        {/* 7 day row */}\r\n        <GridItem>\r\n          <Text>7d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand7D}</Text>\r\n        </GridItem>\r\n        {/* 30 day row */}\r\n        <GridItem>\r\n          <Text>30d</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand30D}</Text>\r\n        </GridItem>\r\n        {/* 365 day / APY row */}\r\n        <GridItem>\r\n          <Text>365d(APY)</Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>\r\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\r\n          </Text>\r\n        </GridItem>\r\n        <GridItem>\r\n          <Text>{cakeEarnedPerThousand365D}</Text>\r\n        </GridItem>\r\n      </Grid>\r\n      <Description fontSize=\"12px\" color=\"textSubtle\">\r\n        {TranslateString(\r\n          866,\r\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\r\n        )}\r\n      </Description>\r\n      <Flex justifyContent=\"center\">\r\n        <LinkExternal href={addLiquidityUrl}>\r\n          {TranslateString(999, 'Get')} {lpLabel}\r\n        </LinkExternal>\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ApyCalculatorModal\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { CalculateIcon, IconButton, useModal } from 'lionuikit'\r\nimport ApyCalculatorModal from './ApyCalculatorModal'\r\n\r\nexport interface ApyButtonProps {\r\n  lpLabel?: string\r\n  cakePrice?: BigNumber\r\n  apy?: BigNumber\r\n  addLiquidityUrl?: string\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apy, addLiquidityUrl }) => {\r\n  const [onPresentApyModal] = useModal(\r\n    <ApyCalculatorModal lpLabel={lpLabel} cakePrice={cakePrice} apy={apy} addLiquidityUrl={addLiquidityUrl} />,\r\n  )\r\n\r\n  return (\r\n    <IconButton onClick={onPresentApyModal} variant=\"text\" size=\"sm\" ml=\"4px\">\r\n      <CalculateIcon />\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n","import React, { useMemo, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport styled, { keyframes } from 'styled-components'\r\nimport { Flex, Text, Skeleton } from 'lionuikit'\r\nimport { communityFarms } from 'config/constants'\r\nimport { Farm } from 'state/types'\r\nimport { provider } from 'web3-core'\r\nimport useI18n from 'hooks/useI18n'\r\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\r\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\r\nimport DetailsSection from './DetailsSection'\r\nimport CardHeading from './CardHeading'\r\nimport CardActionsContainer from './CardActionsContainer'\r\nimport ApyButton from './ApyButton'\r\n\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apy?: BigNumber\r\n}\r\n\r\nconst RainbowLight = keyframes`\r\n\t0% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n\t50% {\r\n\t\tbackground-position: 100% 50%;\r\n\t}\r\n\t100% {\r\n\t\tbackground-position: 0% 50%;\r\n\t}\r\n`\r\n\r\nconst StyledCardAccent = styled.div`\r\n\r\n  border-radius: 16px;\r\n  position: absolute;\r\n  top: -2px;\r\n  right: -2px;\r\n  bottom: -2px;\r\n  left: -2px;\r\n  z-index: -1;\r\n`\r\n\r\nconst FCard = styled.div`\r\n  align-self: baseline;\r\n  background: ${(props) => props.theme.card.background};\r\n  border-radius: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-around;\r\n  padding: 24px;\r\n  position: relative;\r\n  text-align: center;\r\n  -webkit-box-shadow: 3px 3px 0px 3px #C6C6C6; \r\n   box-shadow: 3px 3px 0px 3px #C6C6C6;\r\n   \r\n`\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.borderColor};\r\n  height: 1px;\r\n  margin: 28px auto;\r\n  width: 100%;\r\n  \r\n`\r\n\r\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\r\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\r\n  overflow: hidden;\r\n`\r\n\r\ninterface FarmCardProps {\r\n  farm: FarmWithStakedValue\r\n  removed: boolean\r\n  cakePrice?: BigNumber\r\n  bnbPrice?: BigNumber\r\n  ethPrice?: BigNumber\r\n  ethereum?: provider\r\n  account?: string\r\n}\r\n\r\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethPrice, ethereum, account }) => {\r\n  const TranslateString = useI18n()\r\n\r\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\r\n\r\n  const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\r\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\r\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\r\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\r\n\r\n  const totalValue: BigNumber = useMemo(() => {\r\n    if (!farm.lpTotalInQuoteToken) {\r\n      return null\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\r\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.LION) {\r\n      return cakePrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    if (farm.quoteTokenSymbol === QuoteToken.ETH) {\r\n      return ethPrice.times(farm.lpTotalInQuoteToken)\r\n    }\r\n    return farm.lpTotalInQuoteToken\r\n  }, [bnbPrice, cakePrice, ethPrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\r\n\r\n  const totalValueFormated = totalValue\r\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\r\n    : '-'\r\n\r\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('LIONSWAP', '')\r\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'LION'\r\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString('en-US').slice(0, -1)\r\n\r\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses } = farm\r\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, quoteTokenSymbol, tokenAddresses })\r\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\r\n\r\n  return (\r\n    <FCard>\r\n      {farm.tokenSymbol === 'LION' && <StyledCardAccent />}\r\n      <CardHeading\r\n        lpLabel={lpLabel}\r\n        multiplier={farm.multiplier}\r\n        isCommunityFarm={isCommunityFarm}\r\n        farmImage={farmImage}\r\n        tokenSymbol={farm.tokenSymbol}\r\n      />\r\n      {!removed && (\r\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n          <Text>{TranslateString(736, 'APR')}:</Text>\r\n          <Text color=\"orangeTextthree\" style={{ display: 'flex', alignItems: 'center' }}>\r\n            {farm.apy ? (\r\n              <>\r\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apy={farm.apy} />\r\n                {farmAPY}%\r\n              </>\r\n            ) : (\r\n              <Skeleton height={24} width={80} />\r\n            )}\r\n          </Text>\r\n        </Flex>\r\n      )}\r\n      <Flex justifyContent=\"space-between\">\r\n        <Text>{TranslateString(318, 'Earn')}:</Text>\r\n        <Text color=\"orangeTextthree\">{earnLabel}</Text>\r\n      </Flex>\r\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} addLiquidityUrl={addLiquidityUrl} />\r\n      <DetailsSection\r\n          removed={removed}\r\n          bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\r\n          totalValueFormated={totalValueFormated}\r\n          lpLabel={lpLabel}\r\n          addLiquidityUrl={addLiquidityUrl}\r\n        />\r\n    </FCard>\r\n  )\r\n}\r\n\r\nexport default FarmCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useRouteMatch, Link } from 'react-router-dom'\r\nimport { ButtonMenu, ButtonMenuItem, Text, Toggle } from 'lionuikit'\r\nimport useI18n from 'hooks/useI18n'\r\n\r\nconst FarmTabButtons = ({ stackedOnly, setStackedOnly }) => {\r\n  const { url, isExact } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ToggleWrapper>\r\n        <Toggle checked={stackedOnly} onChange={() => setStackedOnly(!stackedOnly)} />\r\n        <Text> {TranslateString(1116, 'Staked only')}</Text>\r\n      </ToggleWrapper>\r\n      <ButtonMenu activeIndex={isExact ? 0 : 1} size=\"md\" variant=\"subtle\">\r\n        <ButtonMenuItem   as={Link} to={`${url}`} variant=\"success\">\r\n          {TranslateString(698, 'Active')}\r\n        </ButtonMenuItem>\r\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\r\n          {TranslateString(700, 'Inactive')}\r\n        </ButtonMenuItem>\r\n      </ButtonMenu>\r\n    </Wrapper>\r\n  ) \r\n}\r\n\r\nexport default FarmTabButtons\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 32px;\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-right: 32px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n    font-weight:normal;\r\n  }\r\n`\r\n","import React, { useEffect, useCallback, useState } from 'react'\r\nimport { Route, useRouteMatch } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport { Image, Heading } from 'lionuikit'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\r\nimport FlexLayout from 'components/layout/Flex'\r\nimport Page from 'components/layout/Page'\r\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd, usePriceEthBusd } from 'state/hooks'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmUserDataAsync } from 'state/actions'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport useI18n from 'hooks/useI18n'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport Divider from './components/Divider'\r\n\r\nconst Farms: React.FC = () => {\r\n  const { path } = useRouteMatch()\r\n  const TranslateString = useI18n()\r\n  const farmsLP = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const bnbPrice = usePriceBnbBusd()\r\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const ethPriceUsd = usePriceEthBusd()\r\n\r\n  const dispatch = useDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n  useEffect(() => {\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n    }\r\n  }, [account, dispatch, fastRefresh])\r\n\r\n  const [stackedOnly, setStackedOnly] = useState(false)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\r\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X')\r\n  const stackedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n  // /!\\ This function will be removed soon\r\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\r\n  // to retrieve assets prices against USD\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay, removed: boolean) => {\r\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\r\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\r\n          return farm\r\n        }\r\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\r\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\r\n\r\n        // cakePriceInQuote * cakeRewardPerYear / lpTotalInQuoteToken\r\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\r\n\r\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD || farm.quoteTokenSymbol === QuoteToken.UST) {\r\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\r\n        } else if (farm.quoteTokenSymbol === QuoteToken.ETH) {\r\n          apy = cakePrice.div(ethPriceUsd).times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\r\n        } else if (farm.quoteTokenSymbol === QuoteToken.LION) {\r\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\r\n        } else if (farm.dual) {\r\n          const cakeApy =\r\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\r\n          const dualApy =\r\n            farm.tokenPriceVsQuote &&\r\n            new BigNumber(farm.tokenPriceVsQuote)\r\n              .times(farm.dual.rewardPerBlock)\r\n              .times(BLOCKS_PER_YEAR)\r\n              .div(farm.lpTotalInQuoteToken)\r\n\r\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\r\n        }\r\n\r\n        return { ...farm, apy }\r\n      })\r\n      return farmsToDisplayWithAPY.map((farm) => (\r\n        <FarmCard\r\n          key={farm.pid}\r\n          farm={farm}\r\n          removed={removed}\r\n          bnbPrice={bnbPrice}\r\n          cakePrice={cakePrice}\r\n          ethPrice={ethPriceUsd}\r\n          ethereum={ethereum}\r\n          account={account}\r\n        />\r\n      ))\r\n    },\r\n    [farmsLP, bnbPrice, ethPriceUsd, cakePrice, ethereum, account],\r\n  )\r\n\r\n  return (\r\n    <Page>\r\n      <Heading as=\"h1\" size=\"lg\" color=\"secondary\" mb=\"50px\" style={{ textAlign: 'center' }}>\r\n        {TranslateString(696, 'Stake LP tokens to earn LION')}\r\n      </Heading>\r\n      <FarmTabButtons stackedOnly={stackedOnly} setStackedOnly={setStackedOnly} />\r\n      <div>\r\n        <FlexLayout>\r\n          <Route exact path={`${path}`}>\r\n            {stackedOnly ? farmsList(stackedOnlyFarms, false) : farmsList(activeFarms, false)}\r\n          </Route>\r\n          <Route exact path={`${path}/history`}>\r\n            {farmsList(inactiveFarms, true)}\r\n          </Route>\r\n        </FlexLayout>\r\n      </div>\r\n    </Page>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"],"sourceRoot":""}